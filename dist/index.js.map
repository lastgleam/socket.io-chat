{"version":3,"sources":["../index.js"],"names":["app","require","http","Server","io","listen","console","log","get","req","res","sendFile","__dirname","rooms","on","socket_id","socket","id","emit","to","roomName","user","join","includes","push","in","info","leave","index","indexOf","splice","length","data"],"mappings":"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","file":"index.js","sourcesContent":["const app = require('express')();\nconst http = require('http').Server(app);\nconst io = require('socket.io')(http);\n\nhttp.listen(30000, () => {\n    console.log('listening on *:30000');\n});\n\napp.get('/', (req, res) => {\n    res.sendFile(__dirname + '/index.html');\n});\n\nconst rooms = {};\n\nio.on('connection', socket => {\n    const socket_id = socket.id;\n    socket.emit('roomlist', rooms);\n\n    console.log(socket.id + ' has connected');\n    io.to(socket.id).emit('getId', socket.id);\n\n    socket.on('disconnect', () => {\n        socket.emit('user disconnected');\n        console.log(socket.id + ' has disconnected');\n    });\n\n    socket.on('join', (roomName, user) => {\n        socket.join(roomName);\n        if (rooms[roomName]) {\n            if(!rooms[roomName].includes(user.socket_id)){\n                rooms[roomName].push(user.socket_id);\n            }\n        } else {\n            rooms[roomName] = [user.socket_id];\n        }\n        socket.in(roomName).emit(socket_id, roomName);\n        const info = {\n            'status': 'join',\n            'socket_id': socket_id,\n            'roomName': roomName\n        };\n        console.log(socket_id + ' has joined to ' + roomName);\n        socket.in(roomName).emit('info', info);\n        socket.emit('roomlist', rooms);\n        console.log('rooms', rooms)\n    });\n\n    socket.on('leave', (roomName, user) => {\n        socket.leave(roomName);\n        const index = rooms[roomName].indexOf(user.socket_id);\n        rooms[roomName].splice(index, 1);\n        if (rooms[roomName].length < 1) {\n            delete rooms[roomName];\n            console.log(rooms);\n        }\n        const info = {\n            'status': 'leave',\n            'socket_id': socket_id,\n            'roomName': roomName\n        };\n        console.log(user.socket_id + ' has left from ' + roomName);\n        socket.in(roomName).emit('info', info);\n        socket.emit('roomlist', rooms);\n        console.log('rooms',rooms)\n    });\n\n    socket.on('rooms', () => {\n        socket.emit('roomlist', rooms);\n    });\n\n    socket.on('send', data => {\n        io.in(data.roomName).emit('publish', data);\n    });\n});"]}