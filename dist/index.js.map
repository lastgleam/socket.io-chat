{"version":3,"sources":["../index.js"],"names":["express","require","app","server","Server","options","pingTimeout","pingInterval","io","listen","console","log","get","req","res","sendFile","__dirname","users","rooms","on","socket_id","socket","id","emit","to","user","roomName","includes","index","indexOf","splice","join","push","in","info","leave","length","data"],"mappings":"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","file":"index.js","sourcesContent":["const express = require('express');\nconst app = express();\nconst server = require('http').Server(app);\nconst options = {\n    pingTimeout: 60000,\n    pingInterval: 3000\n};\nconst io = require('socket.io')(server, options);\n\nserver.listen(30000, () => {\n    console.log('listening on *:30000');\n});\n\napp.get('/', (req, res) => {\n    res.sendFile(__dirname + '/index.html');\n});\n\nconst users = {};\nconst rooms = {};\n\nio.on('connection', socket => {\n    const socket_id = socket.id;\n    users[socket_id] = {};\n    socket.emit('roomlist', rooms);\n\n    console.log(socket.id + ' has connected');\n    io.to(socket.id).emit('getId', socket.id);\n    console.log('users', users);\n    console.log('rooms', rooms);\n\n    socket.on('disconnect', () => {\n        socket.emit('user disconnected');\n        let user = users[socket.id];\n        if (rooms[user.roomName] && rooms[user.roomName].includes(socket.id)) {\n            let user = users[socket_id];\n            let index = rooms[user.roomName].indexOf(socket.id);\n            delete user.roomName;\n            rooms[user.roomName].splice(index, 1);\n        }\n        console.log(socket.id + ' has disconnected');\n        console.log('users', users);\n        console.log('rooms', rooms);\n    });\n\n    socket.on('join', (roomName, user) => {\n        socket.join(roomName);\n        if (rooms[roomName]) {\n            if (!rooms[roomName].includes(user.socket_id)) {\n                rooms[roomName].push(user.socket_id);\n            }\n        } else {\n            rooms[roomName] = [user.socket_id];\n        }\n        users[user.socket_id] = user;\n        socket.in(roomName).emit(socket_id, roomName);\n        const info = {\n            'status': 'join',\n            'socket_id': socket_id,\n            'roomName': roomName\n        };\n        console.log(socket_id + ' has joined to ' + roomName);\n        socket.in(roomName).emit('info', info);\n        socket.emit('roomlist', rooms);\n        console.log('users', users);\n        console.log('rooms', rooms);\n    });\n\n    socket.on('leave', (roomName, user) => {\n        socket.leave(roomName);\n        if(rooms[roomName] && rooms[roomName].includes(user.socket_id)){\n            let index = rooms[roomName].indexOf(user.socket_id);\n            rooms[roomName].splice(index, 1);\n            delete users[user.socket_id].roomName;\n            if (rooms[roomName].length < 1) {\n                delete rooms[roomName];\n                console.log(rooms);\n            }\n            let info = {\n                'status': 'leave',\n                'socket_id': socket_id,\n                'roomName': roomName\n            };\n            console.log(user.socket_id + ' has left from ' + roomName);\n            socket.in(roomName).emit('info', info);\n            socket.emit('roomlist', rooms);\n            console.log('users', users);\n            console.log('rooms', rooms);\n        }else{\n            console.log(socket.id + \"is not entered to any rooms.\");\n        }\n    });\n\n    socket.on('rooms', () => {\n        socket.emit('roomlist', rooms);\n    });\n\n    socket.on('send', data => {\n        io.in(data.roomName).emit('publish', data);\n    });\n});"]}